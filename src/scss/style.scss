// =-= Libraries =-= //
@import './libraries/normalize';

// =-= Helpers =-= //
@import './helpers/functions';
@import './helpers/mixins';

// =-= Variables =-= //
@import './variables/breakpoints';
@import './variables/colors';
@import './variables/fonts';

// =-= Base =-= //
@import './bases/reset';
@import './bases/typography';

// =-= Layouts =-= //

// .container {
//   display: flex;
//   flex-direction: row;
//   justify-content: center;
//   align-items: center;
//   flex-wrap: wrap;
//   position: relative;
//   margin-right: auto;
//   margin-left: auto;
//   padding: 2rem;
//   width: 100%; height: 100%;
//   max-width: 1000px;
// }

.section {
  display: flex;
  padding: 2rem;

  &__content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: stretch;
    position: relative;
    max-width: 800px;
    // height: 100%;
    margin: auto;
  }
}

.--home {

  .section {
    min-height: 50vh;
    background-color: color(light);

    @media (min-width: bkpt(sm)) {
      text-align: center;
      .btn {
        margin: auto;
      }
    }
    &:not(:last-of-type) {
      margin-bottom: 2rem;
    }
  }
  .cover {
    position: relative;
    overflow: hidden;
    background-color: transparent;
    color: #eee;
    text-shadow: 0 0 .25rem color(dark);

    &__video {
      z-index: -1; // dont overlap text
      background-color: darken(color(primary), 20%);
      filter: blur(.5rem) !important;
      // simulate object-fit: cover
      position: absolute;
      top: 50%; left: 50%;
      transform: translate(-50%, -50%);
      width: auto; height: auto;
      max-width: none; max-height: none;
      min-width: 100%; min-height: 100%;
    }
  }
}


// CSS Grid Layout
// Main, Sidebar, Responsive
// What happens if you try to grid a sticky item?



// =-= Components =-= //
// Sort from simple to complex; section, to navbar



@import './components/button';
@import './components/social';
@import './components/navbar';
@import './components/footer';
// form
// posts, comments, articles
// modal
// Sections

// For page-specifics, Use component modifiers




// =-= Utilities =-= //

// @each $bkpt, $value in $breakpoints {
// text-align, margin
// }



@media (prefers-reduced-motion: reduce) {
  * {
    animation: none !important;
    transition: none !important;
    scroll-behavior: auto !important;
  }
}

// =-= Shame =-= //




.button-row {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-content: space-between;
  flex-wrap: wrap;
  margin: 1rem auto;
  width: 100%; 
  .btn {
    flex-grow: 1;
    margin: .5rem;
  }
}


/* 
  TODO:
  stop writing css, find a library already

  

  restructure html; each section gets a --home modifier

*/
